# Use a lightweight OpenJDK base image for the Java Runtime Environment (JRE)
# OpenJDK 17 is a good stable choice. 'slim-buster' keeps the image size down.
FROM openjdk:17-jdk-slim-buster

# Set environment variable for Leiningen to allow running as root (common in Docker)
ENV LEIN_ROOT=true

# Install necessary packages for Leiningen and downloading
# 'curl' is used to download lein.sh, 'git' might be useful for dependencies
RUN apt-get update && \
    apt-get install -y curl git && \
    rm -rf /var/lib/apt/lists/*

# Install Leiningen - The build tool for Clojure
# We download lein.sh, make it executable, and place it in /usr/local/bin
# Then, we run 'lein' once to download its dependencies, making subsequent builds faster.
ENV LEIN_VERSION 2.11.2
ENV LEIN_INSTALL /usr/local/bin/lein

RUN mkdir -p /usr/local/bin && \
    curl -o $LEIN_INSTALL https://raw.githubusercontent.com/technomancy/leiningen/$LEIN_VERSION/bin/lein && \
    chmod +x $LEIN_INSTALL && \
    $LEIN_INSTALL

# Set the working directory inside the container
# This is where your application code will reside.
WORKDIR /app

# Copy the project.clj file first to leverage Docker's build cache.
# If project.clj doesn't change, Docker won't re-download dependencies in subsequent builds.
COPY project.clj .

# Copy your source code, resources, and test directories.
# Adjust these paths if your project structure is different.
COPY src src/
COPY resources resources/
# COPY test test/ # Uncomment if your build process needs tests or you want them in the image

# Build the uberjar (standalone JAR) of your application
# This command compiles your Clojure code and packages it with all its dependencies
# into a single executable JAR file.
# The result will typically be in the 'target' directory.
RUN lein uberjar

# Expose the port your Compojure application listens on.
# The default for Compojure is often 3000. Adjust if your application uses a different port.
EXPOSE 3000

# Define the command to run your application
# Replace 'your-app-name-standalone.jar' with the actual name of the JAR file
# generated by 'lein uberjar'. This name is usually derived from your project.clj.
# For example, if your project is defined as `(defproject my-web-app "0.1.0-SNAPSHOT" ...)`,
# the JAR might be `my-web-app-0.1.0-SNAPSHOT-standalone.jar`.
# You can verify the exact filename after a successful `lein uberjar` run.
CMD ["java", "-jar", "target/fbiwantedclj-0.1.0-SNAPSHOT-standalone.jar"]

# Example usage:
# 1. Save this content as 'Dockerfile' in the root of your Clojure project.
# 2. Build the Docker image:
#    docker build -t my-compojure-app .
# 3. Run the Docker container:
#    docker run -p 3000:3000 my-compojure-app
